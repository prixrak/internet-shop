{"version":3,"file":"static/js/864.a3c4546b.chunk.js","mappings":"6RAUMA,GAASC,EAAAA,EAAAA,KAAS,WACtB,OAAmCC,EAAAA,EAAAA,YAAWC,EAAAA,GAAvCC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,YAEpB,ECXyB,SAACC,GAC1B,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAQ,mCAAG,8FAEbH,GAAa,GAFA,SAGPH,IAHO,sDAKbK,EAAS,KAAEE,SALE,uBAObJ,GAAa,GAPA,0EAAH,qDAWd,MAAO,CAACG,EAAUJ,EAAWE,GDJcI,EAAY,kBACrDC,EAAAA,EAAAA,IAAmBV,EAAYW,aAAaC,GAAIZ,EAAYa,cAAcD,GAAIb,EAAYe,KAAMf,EAAYgB,OAC3GC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAKG,MACjBrB,EAAYsB,cAAcJ,EAAKK,OAC/BvB,EAAYwB,WAAWN,EAAKG,YALhC,eAAOI,EAAP,KAA+BC,EAA/B,KAcA,OALAC,EAAAA,EAAAA,YAAU,WACRF,MACC,CAACzB,EAAYe,KAAMd,EAAYW,aAAcX,EAAYa,gBAE5DK,QAAQC,IAAIpB,EAAY4B,QAAQC,QAC7BH,GAAgB,SAACI,EAAA,EAAD,CAASC,UAAW,UAErC,SAACC,EAAA,EAAD,UACGhC,EAAY4B,QAAQC,QACjB,UAAC,WAAD,YACE,SAACI,EAAA,EAAD,CAAYL,QAAS5B,EAAY4B,WACjC,SAACM,EAAA,EAAD,CAAOC,MAAOnC,QAEhB,SAACoC,EAAA,EAAD,CAAOC,UAAU,YAAjB,qHAMV","sources":["pages/Basket.jsx","hooks/useFetching.js"],"sourcesContent":["import React, { useEffect, useContext } from 'react';\r\nimport { fetchBasketDevices } from '../http/basketAPI'\r\nimport { Alert, Container, Spinner } from 'react-bootstrap';\r\n\r\nimport Pages from '../components/Pages';\r\nimport DeviceList from '../components/DeviceList';\r\nimport { Context } from './../index';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useFetching } from './../hooks/useFetching';\r\n\r\nconst Basket = observer(() => {\r\n  const {basketStore, filterStore} = useContext(Context);\r\n\r\n  const [fetchBasketDevicesHook, loading] =  useFetching(() => \r\n    fetchBasketDevices(filterStore.selectedType.id, filterStore.selectedBrand.id, basketStore.page, basketStore.limit)\r\n    .then(data => {\r\n      console.log(data.rows)\r\n      basketStore.setTotalCount(data.count);\r\n      basketStore.setDevices(data.rows);\r\n    })\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchBasketDevicesHook();\r\n  }, [basketStore.page, filterStore.selectedType, filterStore.selectedBrand]);\r\n\r\n  console.log(basketStore.devices.length)\r\n  if(loading) return <Spinner animation={\"grow\"} />;\r\n  return (\r\n    <Container>\r\n      {basketStore.devices.length\r\n        ? <React.Fragment>\r\n            <DeviceList devices={basketStore.devices}/>\r\n            <Pages store={basketStore}/> \r\n          </React.Fragment>\r\n        : <Alert className='info mt-2'>Ваша корзина пуста</Alert>\r\n      }\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default Basket;","import { useState } from \"react\";\r\n\r\nexport const useFetching = (fetchFunc) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const fetching = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      await fetchFunc();\r\n    } catch(e) {\r\n      setError(e.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return [fetching, isLoading, error];\r\n}"],"names":["Basket","observer","useContext","Context","basketStore","filterStore","fetchFunc","useState","isLoading","setIsLoading","error","setError","fetching","message","useFetching","fetchBasketDevices","selectedType","id","selectedBrand","page","limit","then","data","console","log","rows","setTotalCount","count","setDevices","fetchBasketDevicesHook","loading","useEffect","devices","length","Spinner","animation","Container","DeviceList","Pages","store","Alert","className"],"sourceRoot":""}